name: Docker

on:
  workflow_dispatch:
  push:
    branches: [ main ]


env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:

  build:
    name: Pull
    runs-on: ubuntu-latest
    steps:
    - name: Before freeing up disk space
      run: |
        echo "Before freeing up disk space"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    # 增加可用磁盘空间
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:

        root-reserve-mb: 2048
        swap-size-mb: 128
        remove-dotnet: 'true'
        remove-haskell: 'true'
        # 如果空间还是不够用，可以把以下开启，清理出更多空间
        # remove-android: 'true'
        # remove-codeql: 'true'
        build-mount-path: '/var/lib/docker/'

    - name: Restart docker
      run: sudo service docker restart

    - name: Free up disk space complete
      run: |
        echo "Free up disk space complete"
        echo "=============================================================================="
        df -hT
        echo "=============================================================================="

    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push image Aliyun
      run: |
        docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY
        
        # --- 数据预处理,判断镜像是否重名 ---
        declare -A duplicate_images
        declare -A temp_map
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
            
            # 获取镜像的完整名称（行的第一个字段）
            source_image_first_loop=$(echo "$line" | awk '{print $1}')
            # 获取镜像名:版本号  例如nginx:1.25.3
            image_name_tag_first_loop=$(basename "$source_image_first_loop")
            # 获取镜像名例如nginx
            image_name_first_loop=$(echo "$image_name_tag_first_loop" | awk -F':' '{print $1}')
            
            # 获取命名空间 例如kasmweb, docker.io/library -> library
            # 使用原始脚本的awk逻辑，但应用于正确的变量
            namespace_first_loop=$(echo "$source_image_first_loop" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')

            # 检查镜像名是否重名（跨命名空间）
            if [[ -n "${temp_map[$image_name_first_loop]}" ]]; then
                 # 如果temp_map已经存在镜像名，判断是不是同一命名空间
                 if [[ "${temp_map[$image_name_first_loop]}" != "$namespace_first_loop"  ]]; then
                    echo "duplicate image name: $image_name_first_loop from namespace $namespace_first_loop (conflicts with ${temp_map[$image_name_first_loop]})"
                    duplicate_images[$image_name_first_loop]="true"
                 fi
            else
                # 存镜像的命名空间
                temp_map[$image_name_first_loop]="$namespace_first_loop"
            fi       
        done < images.txt
        
        # --- 主处理循环 ---
        while IFS= read -r line || [ -n "$line" ]; do
            # 忽略空行与注释
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi
        
            # 获取镜像的完整名称（行的第一个字段）
            source_image=$(echo "$line" | awk '{print $1}')
            
            # 提取平台参数（如果存在）
            platform=$(echo "$line" | awk -F'--platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
            echo "platform is $platform"
            
            # 如果存在架构信息 将架构信息拼到镜像名称前面
            if [ -z "$platform" ]; then
                platform_prefix=""
            else
                platform_prefix="${platform//\//_}_" # 将 / 替换为 _ 并添加后缀 _
            fi
            echo "platform_prefix is $platform_prefix"
            
            # 获取 镜像名:版本号  例如nginx:1.25.3 (从 source_image 中提取)
            source_image_name_tag=$(basename "$source_image")
            
            # 获取镜像名例  例如nginx (从 source_image_name_tag 中提取)
            image_name=$(echo "$source_image_name_tag" | awk -F':' '{print $1}')
            
            # 获取命名空间 (使用原始脚本的awk逻辑，但应用于 source_image)
            current_namespace=$(echo "$source_image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')

            name_space_prefix=""
            # 如果镜像名重名
            if [[ -n "${duplicate_images[$image_name]}" ]]; then
               #如果命名空间非空，将命名空间加到前缀
               if [[ -n "${current_namespace}" ]]; then
                  name_space_prefix="${current_namespace}_"
               fi
            fi
            
            # 将@sha256:等字符删除 (从 source_image_name_tag 中清理)
            target_image_name_tag_clean="${source_image_name_tag%%@*}"
            
            # 构建新的镜像名称 (目标镜像)
            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$platform_prefix$name_space_prefix$target_image_name_tag_clean"
            
            # --- 执行 Docker 命令 ---
            # 使用双引号包裹变量，特别是 $line 和 $new_image
            echo "docker pull \"$line\""
            docker pull "$line" # 使用完整的行进行 pull，以便处理 --platform

            echo "Executing: docker tag \"$source_image\" \"$new_image\""
            docker tag "$source_image" "$new_image" # 使用正确的源镜像名称进行 tag

            echo "Executing: docker push \"$new_image\""
            docker push "$new_image"

            # --- 清理磁盘空间 ---
            echo "开始清理磁盘空间"
            echo "=============================================================================="
            df -hT
            echo "=============================================================================="
            # 清理源镜像和目标镜像，使用双引号
            docker rmi "$source_image"
            docker rmi "$new_image"
            echo "磁盘空间清理完毕"
            echo "=============================================================================="
            df -hT
            echo "=============================================================================="     
            
        done < images.txt
